{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\nconst datetimePicker = document.querySelector(\"#datetime-picker\");\nconst startBtn = document.querySelector(\"[data-start]\");\nconst daysEl = document.querySelector(\"[data-days]\");\nconst hoursEl = document.querySelector(\"[data-hours]\");\nconst minutEl = document.querySelector(\"[data-minutes]\");\nconst secondsEl = document.querySelector(\"[data-seconds]\");\nlet timerInterval;\nlet userSelectedDate;\nconst options = {\nenableTime: true,\ntime_24hr: true,\ndefaultDate: new Date(),\nminuteIncrement: 1,\nonClose(selectedDates) {\nconst selectedDate = selectedDates[0];\nif (selectedDate <= new Date()) {\niziToast.error({\ntitle: 'Error',\nmessage: 'Please choose a date in the future',\n});\nstartBtn.disabled = true;\n} else {\nuserSelectedDate = selectedDate;\nstartBtn.disabled = false;\n}\n},\n};\n\nflatpickr(datetimePicker, options);\nstartBtn.addEventListener(\"click\", () => {\n    startBtn.disabled = true;\n    datetimePicker.disabled = true;\n    startCountdown();\n});\n\nfunction startCountdown() {\ntimerInterval = setInterval(() => {\nconst now = new Date();\nconst timeRemaining = userSelectedDate - now;\nif (timeRemaining <= 0) {\nclearInterval(timerInterval);\nupdateTimerDisplay(0, 0, 0, 0);\ndatetimePicker.disabled = false;\nreturn;\n}\nconst { days, hours, minutes, seconds } = convertMs(timeRemaining);\nupdateTimerDisplay(days, hours, minutes, seconds);\n}, 1000);\n}\nfunction convertMs(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    const days = Math.floor(ms / day);\n    const hours = Math.floor((ms % day) / hour);\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n    return { days, hours, minutes, seconds };\n}\n\nfunction updateTimerDisplay(days, hours, minutes, seconds) {\n    daysEl.textContent = addLeadingZero(days);\n    hoursEl.textContent = addLeadingZero(hours);\n    minutEl.textContent = addLeadingZero(minutes);\n    secondsEl.textContent = addLeadingZero(seconds);\n}\n\nfunction addLeadingZero(value) {\n    return String(value).padStart(2, '0');\n}\n"],"names":["datetimePicker","startBtn","daysEl","hoursEl","minutEl","secondsEl","timerInterval","userSelectedDate","options","selectedDates","selectedDate","iziToast","flatpickr","startCountdown","timeRemaining","updateTimerDisplay","days","hours","minutes","seconds","convertMs","ms","addLeadingZero","value"],"mappings":"iyBAIA,MAAMA,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAS,SAAS,cAAc,aAAa,EAC7CC,EAAU,SAAS,cAAc,cAAc,EAC/CC,EAAU,SAAS,cAAc,gBAAgB,EACjDC,EAAY,SAAS,cAAc,gBAAgB,EACzD,IAAIC,EACAC,EACJ,MAAMC,EAAU,CAChB,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACvB,MAAMC,EAAeD,EAAc,CAAC,EAChCC,GAAgB,IAAI,MACxBC,EAAS,MAAM,CACf,MAAO,QACP,QAAS,oCACT,CAAC,EACDV,EAAS,SAAW,KAEpBM,EAAmBG,EACnBT,EAAS,SAAW,GAEpB,CACA,EAEAW,EAAUZ,EAAgBQ,CAAO,EACjCP,EAAS,iBAAiB,QAAS,IAAM,CACrCA,EAAS,SAAW,GACpBD,EAAe,SAAW,GAC1Ba,GACJ,CAAC,EAED,SAASA,GAAiB,CAC1BP,EAAgB,YAAY,IAAM,CAElC,MAAMQ,EAAgBP,EADV,IAAI,KAEhB,GAAIO,GAAiB,EAAG,CACxB,cAAcR,CAAa,EAC3BS,EAAmB,EAAG,EAAG,EAAG,CAAC,EAC7Bf,EAAe,SAAW,GAC1B,MACA,CACA,KAAM,CAAE,KAAAgB,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAKC,EAAUN,CAAa,EACjEC,EAAmBC,EAAMC,EAAOC,EAASC,CAAO,CAChD,EAAG,GAAI,CACP,CACA,SAASC,EAAUC,EAAI,CAMnB,MAAML,EAAO,KAAK,MAAMK,EAAK,KAAG,EAC1BJ,EAAQ,KAAK,MAAOI,EAAK,MAAO,IAAI,EACpCH,EAAU,KAAK,MAAQG,EAAK,MAAO,KAAQ,GAAM,EACjDF,EAAU,KAAK,MAASE,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAL,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CAC1C,CAEA,SAASJ,EAAmBC,EAAMC,EAAOC,EAASC,EAAS,CACvDjB,EAAO,YAAcoB,EAAeN,CAAI,EACxCb,EAAQ,YAAcmB,EAAeL,CAAK,EAC1Cb,EAAQ,YAAckB,EAAeJ,CAAO,EAC5Cb,EAAU,YAAciB,EAAeH,CAAO,CAClD,CAEA,SAASG,EAAeC,EAAO,CAC3B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACxC"}